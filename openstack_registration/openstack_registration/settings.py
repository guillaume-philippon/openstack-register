"""
Django settings for openstack_registration project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import ldap
from django_auth_ldap.config import LDAPSearch
import ConfigParser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4k8(2g_d_05t7^^g*8&@2k3qghe7eh2ws)mfl-*^d@5=jd*3_^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'registration',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'openstack_registration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openstack_registration.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

LOGIN_URL = '/login'
LOGOUT_URL = '/logout:'
LOGIN_REDIRECT_URL = '/'
STATIC_URL = '/static/'
GLOBAL_CONFIG = {}

# Allow user to have a specific configuration file on there $HOME
if os.path.isfile(os.path.expanduser('~') + '/.register.cfg'):
    configuration_file = os.path.expanduser('~') + '/.register.cfg'
else:
    configuration_file = '/etc/register.cfg'

config = ConfigParser.RawConfigParser()
config.read(configuration_file)

GLOBAL_CONFIG['LDAP_SERVER'] = config.get('LDAP', 'server')
GLOBAL_CONFIG['LDAP_USER'] = config.get('LDAP', 'bind_dn')
GLOBAL_CONFIG['LDAP_PASSWORD'] = config.get('LDAP', 'password')
GLOBAL_CONFIG['LDAP_BASE_OU'] = config.get('LDAP', 'user_search')


AUTH_LDAP_SERVER_URI = config.get('AUTH', 'server')
AUTH_LDAP_BIND_DN = config.get('AUTH', 'bind_dn')
AUTH_LDAP_BIND_PASSWORD = config.get('AUTH', 'password')
# AUTH_LDAP_USER_SEARCH = LDAPSearch(config.get('AUTH',
#                                               'user_search'),
#                                    ldap.SCOPE_SUBTREE,
#                                    "(samaccountname=%(user)s)")
AUTH_LDAP_USER_SEARCH = LDAPSearch(config.get('AUTH',
                                              'user_search'),
                                   ldap.SCOPE_SUBTREE,
                                   "(uid=%(user)s)")
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)
